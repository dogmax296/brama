// <auto-generated />
using System;
using Brama.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Brama.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class BramaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Brama.Models.Entities.Accommodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("accommodation_id");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid")
                        .HasColumnName("floor_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("accommodation");
                });

            modelBuilder.Entity("Brama.Models.Entities.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("building_id");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("letter");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.ToTable("building");
                });

            modelBuilder.Entity("Brama.Models.Entities.BuildingUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("building_unit_id");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid")
                        .HasColumnName("building_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("building_unit");
                });

            modelBuilder.Entity("Brama.Models.Entities.Entrance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entrance_id");

                    b.Property<Guid?>("BuildingUnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("building_unit_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex("BuildingUnitId");

                    b.ToTable("entrance");
                });

            modelBuilder.Entity("Brama.Models.Entities.EntranceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entrance_request_id");

                    b.Property<Guid>("EntranceId")
                        .HasColumnType("uuid")
                        .HasColumnName("entrance_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("EntranceId");

                    b.ToTable("entrance_request");
                });

            modelBuilder.Entity("Brama.Models.Entities.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("floor_id");

                    b.Property<Guid>("BuildingUnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("building_unit_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("BuildingUnitId");

                    b.ToTable("floor");
                });

            modelBuilder.Entity("Brama.Models.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Patronic")
                        .HasColumnType("text")
                        .HasColumnName("patronic");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("person");
                });

            modelBuilder.Entity("Brama.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("person_status_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Brama.Models.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("person_status_id");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("uuid")
                        .HasColumnName("accommodation_id");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime_active_from");

                    b.Property<DateTime>("ActiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime_active_to");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<int>("UseAmount")
                        .HasColumnType("integer")
                        .HasColumnName("use_amount");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("status");
                });

            modelBuilder.Entity("Brama.Models.Entities.StatusLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("status_log_id");

                    b.Property<DateTime>("DateTimeIssued")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time_issued");

                    b.Property<Guid?>("EntranceRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("entrance_request_id");

                    b.Property<Guid>("PersonIdTo")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id_to");

                    b.Property<Guid>("StatusIdFrom")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id_from");

                    b.HasKey("Id");

                    b.HasIndex("EntranceRequestId")
                        .IsUnique();

                    b.HasIndex("PersonIdTo");

                    b.HasIndex("StatusIdFrom");

                    b.ToTable("status_log");
                });

            modelBuilder.Entity("Brama.Models.Entities.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("visit_id");

                    b.Property<DateTime>("DateTimeVisited")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time_visited");

                    b.Property<Guid>("EntranceId")
                        .HasColumnType("uuid")
                        .HasColumnName("entrance_id");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.HasKey("Id");

                    b.HasIndex("EntranceId");

                    b.HasIndex("StatusId");

                    b.ToTable("visit");
                });

            modelBuilder.Entity("Brama.Models.Entities.Accommodation", b =>
                {
                    b.HasOne("Brama.Models.Entities.Floor", "Floor")
                        .WithMany("Accommodations")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("Brama.Models.Entities.BuildingUnit", b =>
                {
                    b.HasOne("Brama.Models.Entities.Building", "Building")
                        .WithMany("BuildingUnits")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Brama.Models.Entities.Entrance", b =>
                {
                    b.HasOne("Brama.Models.Entities.BuildingUnit", "BuildingUnit")
                        .WithMany("Entrances")
                        .HasForeignKey("BuildingUnitId");

                    b.Navigation("BuildingUnit");
                });

            modelBuilder.Entity("Brama.Models.Entities.EntranceRequest", b =>
                {
                    b.HasOne("Brama.Models.Entities.Entrance", "Entrance")
                        .WithMany("EntranceRequests")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrance");
                });

            modelBuilder.Entity("Brama.Models.Entities.Floor", b =>
                {
                    b.HasOne("Brama.Models.Entities.BuildingUnit", "BuildingUnit")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingUnit");
                });

            modelBuilder.Entity("Brama.Models.Entities.Status", b =>
                {
                    b.HasOne("Brama.Models.Entities.Accommodation", "Accommodation")
                        .WithMany("Statuses")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brama.Models.Entities.Person", "Person")
                        .WithMany("Statuses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brama.Models.Entities.Role", "Role")
                        .WithMany("Statuses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Brama.Models.Entities.StatusLog", b =>
                {
                    b.HasOne("Brama.Models.Entities.EntranceRequest", "EntranceRequest")
                        .WithOne("StatusLog")
                        .HasForeignKey("Brama.Models.Entities.StatusLog", "EntranceRequestId");

                    b.HasOne("Brama.Models.Entities.Person", "PersonTo")
                        .WithMany("RecievedStatusLogs")
                        .HasForeignKey("PersonIdTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brama.Models.Entities.Status", "StatusFrom")
                        .WithMany("GivenStatusLogs")
                        .HasForeignKey("StatusIdFrom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntranceRequest");

                    b.Navigation("PersonTo");

                    b.Navigation("StatusFrom");
                });

            modelBuilder.Entity("Brama.Models.Entities.Visit", b =>
                {
                    b.HasOne("Brama.Models.Entities.Entrance", "Entrance")
                        .WithMany("Visits")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brama.Models.Entities.Status", "Status")
                        .WithMany("Visits")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrance");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Brama.Models.Entities.Accommodation", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Brama.Models.Entities.Building", b =>
                {
                    b.Navigation("BuildingUnits");
                });

            modelBuilder.Entity("Brama.Models.Entities.BuildingUnit", b =>
                {
                    b.Navigation("Entrances");

                    b.Navigation("Floors");
                });

            modelBuilder.Entity("Brama.Models.Entities.Entrance", b =>
                {
                    b.Navigation("EntranceRequests");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Brama.Models.Entities.EntranceRequest", b =>
                {
                    b.Navigation("StatusLog");
                });

            modelBuilder.Entity("Brama.Models.Entities.Floor", b =>
                {
                    b.Navigation("Accommodations");
                });

            modelBuilder.Entity("Brama.Models.Entities.Person", b =>
                {
                    b.Navigation("RecievedStatusLogs");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Brama.Models.Entities.Role", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Brama.Models.Entities.Status", b =>
                {
                    b.Navigation("GivenStatusLogs");

                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
